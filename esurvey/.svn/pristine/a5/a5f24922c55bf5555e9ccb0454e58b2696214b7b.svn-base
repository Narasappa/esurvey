class User < ActiveRecord::Base
  belongs_to :political_party
  attr_accessible :authentication_token, :email, :encrypted_password, :first_name, :is_active, :last_name, :mobile_number, :reset_password_code, :reset_password_code_until, :salt,
  :password,:password_confirmation,:political_party_id,:role_id,:picture_attributes

   EMAIL_REGEX = /^[A-Z0-9._%-]+@([A-Z0-9-]+\.)+[A-Z]{2,4}$/i
 # validates :username, :presence => true, :uniqueness => true, :length => { :in => 3..20 }
  validates :first_name, :presence => true
  validates :mobile_number,:presence=> true, :uniqueness =>{:scope =>[:political_party_id]}
  validates :email,:uniqueness =>{:scope =>[:political_party_id]},:format=> { with:  /^[A-Z0-9._%-]+@([A-Z0-9-]+\.)+[A-Z]{2,4}$/i,
    message: "only allows valid email address" },:allow_nil=>true,:allow_blank=> true
  validates :password, :confirmation => true
  validates_length_of :password, :in => 6..20, :on => :create
  belongs_to  :role
  attr_accessor :password
  before_save :encrypt_password
  after_save :clear_password
  
  scope :active, lambda { |party_name| where("is_active= true and political_party_id=?",party_name) }
  scope :inactive, lambda { |party_name| where("is_active= false and political_party_id=?", party_name ) }

  belongs_to :political_parties
  has_one :picture, :as => :imageable
  accepts_nested_attributes_for :picture


  def self.authenticate(username_or_email="", login_password="")

    if  EMAIL_REGEX.match(username_or_email)    
      user = User.find_by_email(username_or_email)
    else
      user = User.find_by_mobile_number(username_or_email)
    end

    if user && user.match_password(login_password)
      return user
    else
      return false
    end
  end   

  def match_password(login_password="")
    encrypted_password == BCrypt::Engine.hash_secret(login_password, salt)
  end



  def encrypt_password
    unless password.blank?
      self.salt = BCrypt::Engine.generate_salt
      self.encrypted_password = BCrypt::Engine.hash_secret(password, salt)
    end
  end

  def clear_password
    self.password = nil
  end

 def role_symbols
    (roles || []).map {|r| r.title.underscore.to_sym}
 end


end
